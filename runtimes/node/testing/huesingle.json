{
    "parameters": [
    {
        "name": "bridge_url",
        "required": true
    },
    {
        "name": "username",
        "required": true
    }
    ],
        "description": "Hue Light Bulb\n==============\n\nThis controls a single Hue bulb.\n\nTo use, select a Bulb name by entering it in the `Bulb Name` box and\nclick update.\n\n",
        "runtime_imports": [
            "http",
        "color"
            ],
        "ports": [
        {
            "type": "bool",
            "direction": "inout",
            "name": "Power"
        },
        {
            "type": "color",
            "direction": "inout",
            "name": "Color"
        },
        {
            "max": 255,
            "type": "integer",
            "direction": "inout",
            "min": 0,
            "name": "Brightness"
        },
        {
            "type": "string",
            "direction": "input",
            "name": "BulbName"
        },
        {
            "type": "string",
            "direction": "output",
            "name": "Bulbs"
        }
    ],
        "code": "// name: Hue Single\n// author: Brad Campbell\n// email: bradjc@umich.edu\n//\n// Hue Light Bulb\n// ==============\n//\n// This controls a single Hue bulb.\n//\n// To use, select a Bulb name by entering it in the `Bulb Name` box and\n// click update.\n//\n\nvar bulb_layout;\n\nvar test = 'test';\n\nfunction* prefetch_bulb_layout () {\n\tvar url = get_parameter('bridge_url') + '/api/' + get_parameter('username') + '/lights';\n\tbulb_layout = JSON.parse(yield* rt.http.readURL(url));\n}\n\nfunction get_bulb_id () {\n\tvar name = get('BulbName');\n\n\tfor (var key in bulb_layout) {\n\t\tif (bulb_layout[key].name == name) {\n\t\t\treturn key;\n\t\t}\n\t}\n}\n\nfunction* set_bulb_paramter (params) {\n\tvar bulbid = get_bulb_id();\n\n\turl = get_parameter('bridge_url') + '/api/' + get_parameter('username') + '/lights/' + bulbid + '/state';\n\tyield* rt.http.request(url, 'PUT', null, JSON.stringify(params), 3000);\n}\n\nfunction* init () {console.log('INIT HUE');\n\tcreate_port('input', 'BulbName');\n\tcreate_port('output', 'Bulbs');\n\n\tyield* prefetch_bulb_layout();\n\tvar s = '';\n\n\tfor (var key in bulb_layout) {\n\t\ts += bulb_layout[key].name + ', ';\n\t}\n\tset('Bulbs', s);\n}\n\nfunction* Power (on) {\n\tyield* set_bulb_paramter({'on': on});\n}\n\nfunction* Color (hex_color) {\n\thsv = rt.color.hex_to_hsv(hex_color);\n\tparams = {'hue': Math.round(hsv.h*182.04),\n\t          'sat': Math.round(hsv.s*255),\n\t          'bri': Math.round(hsv.v*255)}\n\tyield* set_bulb_paramter(params);\n}\n\nfunction* Brightness (brightness) {\n\tyield* set_bulb_paramter({'bri': parseInt(brightness)});\n}\n\nfunction* BulbName (name) {\n\tvar bulbid = get_bulb_id();\n\tif (bulbid) {\n\t\tvar url = get_parameter('bridge_url') + '/api/' + get_parameter('username') + '/lights/' + bulbid;\n\t\tvar data = JSON.parse(yield* rt.http.readURL(url));\n\n\t\tset('Power', data.state.on);\n\t\tset('Color', rt.color.hsv_to_hex({h:data.state.hue/182.04, s:data.state.sat/255, v:data.state.bri/255}));\n\t\tset('Brightness', data.state.bri);\n\t}\n}\n",
        "name": "Hue Single",
        "author": {
            "email": "bradjc@umich.edu",
            "name": "Brad Campbell"
        },
        "safe_name": "Hue_Single",
        "version": "0.1",
        "dependencies": []
}
